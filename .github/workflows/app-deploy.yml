name: "Deploy Application"

on:
  push:
    branches: [main]
    paths:
      - "src/**"
      - ".github/workflows/app-deploy.yml"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - staging
          - prod
      slot:
        description: "Deployment slot (production or staging)"
        required: true
        default: "staging"
        type: choice
        options:
          - production
          - staging

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Restore dependencies
        run: dotnet restore src/WeatherApi/WeatherApi.csproj

      - name: Build
        run: dotnet build src/WeatherApi/WeatherApi.csproj --no-restore --configuration Release

      - name: Test
        run: dotnet test src/WeatherApi/WeatherApi.csproj --no-build --verbosity normal --configuration Release

      - name: Publish
        run: dotnet publish src/WeatherApi/WeatherApi.csproj --no-build --configuration Release --output ./publish

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: weather-api
          path: ./publish

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'development' }}

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: weather-api
          path: ./publish

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
            }

      - name: Get App Service Name
        id: get-app-name
        run: |
          ENV="${{ github.event.inputs.environment || 'dev' }}"
          # Use the correct resource group name pattern from bootstrap
          RG_NAME="weatherapi-demo-${ENV}-rg"
          APP_NAME=$(az webapp list --resource-group "${RG_NAME}" --query "[0].name" -o tsv)
          echo "app-name=${APP_NAME}" >> $GITHUB_OUTPUT
          echo "App Service Name: ${APP_NAME}"
          echo "Resource Group: ${RG_NAME}"

      - name: Deploy to Azure Web App (Staging Slot)
        if: ${{ github.event.inputs.slot == 'staging' || github.event.inputs.slot == '' }}
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ steps.get-app-name.outputs.app-name }}
          package: ./publish

      - name: Deploy to Azure Web App (Production)
        if: ${{ github.event.inputs.slot == 'production' }}
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ steps.get-app-name.outputs.app-name }}
          package: ./publish

      - name: Run Database Migrations
        run: |
          echo "Database migrations would run here"
          echo "In a real scenario, you'd run Entity Framework migrations"

  smoke-tests:
    needs: deploy
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'development' }}

    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
            }

      - name: Get App Service URL
        id: get-url
        run: |
          ENV="${{ github.event.inputs.environment || 'dev' }}"
          SLOT="${{ github.event.inputs.slot || 'staging' }}"
          # Use the correct resource group name pattern from bootstrap
          RG_NAME="weatherapi-demo-${ENV}-rg"
          APP_NAME=$(az webapp list --resource-group "${RG_NAME}" --query "[0].name" -o tsv)

          # Simple deployment - no staging slots in our basic setup
          URL="https://${APP_NAME}.azurewebsites.net"

          echo "app-url=${URL}" >> $GITHUB_OUTPUT
          echo "Testing URL: ${URL}"

      - name: Health Check
        run: |
          URL="${{ steps.get-url.outputs.app-url }}"
          echo "Testing health endpoint: ${URL}/health"

          # Wait for app to be ready
          for i in {1..10}; do
            if curl -sSf "${URL}/health" > /dev/null; then
              echo "Health check passed!"
              break
            else
              echo "Health check failed, retrying in 30 seconds... (attempt $i/10)"
              sleep 30
            fi
          done

      - name: API Smoke Test
        run: |
          URL="${{ steps.get-url.outputs.app-url }}"

          echo "Testing weather API: ${URL}/api/weather"
          RESPONSE=$(curl -s "${URL}/api/weather")
          echo "Response: $RESPONSE"

          # Verify we get JSON response
          if echo "$RESPONSE" | jq . > /dev/null 2>&1; then
            echo "API smoke test passed!"
          else
            echo "API smoke test failed - invalid JSON response"
            exit 1
          fi

  swap-slots:
    if: ${{ github.event.inputs.slot == 'staging' && (github.event.inputs.environment == 'staging' || github.event.inputs.environment == 'prod') }}
    needs: smoke-tests
    runs-on: ubuntu-latest
    environment: production-approval

    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
            }

      - name: Swap Deployment Slots
        run: |
          ENV="${{ github.event.inputs.environment }}"
          # Use the correct resource group name pattern from bootstrap
          RG_NAME="weatherapi-demo-${ENV}-rg"
          APP_NAME=$(az webapp list --resource-group "${RG_NAME}" --query "[0].name" -o tsv)

          echo "Note: Slot swap not applicable for basic app service without staging slots"
          echo "App Name: ${APP_NAME}"
          echo "Resource Group: ${RG_NAME}"
